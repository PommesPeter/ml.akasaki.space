(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{436:function(s,t,a){s.exports=a.p+"assets/img/5.4_pooling.34cfa695.svg"},591:function(s,t,a){"use strict";a.r(t);var n=a(46),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"池化层"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#池化层"}},[s._v("#")]),s._v(" 池化层")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" tensorflow "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" tf\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" numpy "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" np\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("回忆一下，在“二维卷积层”一节里介绍的图像物体边缘检测应用中，我们构造卷积核从而精确地找到了像素变化的位置。设任意二维数组"),n("code",[s._v("X")]),s._v("的"),n("code",[s._v("i")]),s._v("行"),n("code",[s._v("j")]),s._v("列的元素为"),n("code",[s._v("X[i, j]")]),s._v("。如果我们构造的卷积核输出"),n("code",[s._v("Y[i, j]=1")]),s._v("，那么说明输入中"),n("code",[s._v("X[i, j]")]),s._v("和"),n("code",[s._v("X[i, j+1]")]),s._v("数值不一样。这可能意味着物体边缘通过这两个元素之间。但实际图像里，我们感兴趣的物体不会总出现在固定位置：即使我们连续拍摄同一个物体也极有可能出现像素位置上的偏移。这会导致同一个边缘对应的输出可能出现在卷积输出"),n("code",[s._v("Y")]),s._v("中的不同位置，进而对后面的模式识别造成不便。")]),s._v(" "),n("p",[s._v("在本节中我们介绍池化（pooling）层，它的提出是为了缓解卷积层对位置的过度敏感性。")]),s._v(" "),n("h2",{attrs:{id:"二维最大池化层和平均池化层"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二维最大池化层和平均池化层"}},[s._v("#")]),s._v(" 二维最大池化层和平均池化层")]),s._v(" "),n("p",[s._v("同卷积层一样，池化层每次对输入数据的一个固定形状窗口（又称池化窗口）中的元素计算输出。不同于卷积层里计算输入和核的互相关性，池化层直接计算池化窗口内元素的最大值或者平均值。该运算也分别叫做最大池化或平均池化。在二维最大池化中，池化窗口从输入数组的最左上方开始，按从左往右、从上往下的顺序，依次在输入数组上滑动。当池化窗口滑动到某一位置时，窗口中的输入子数组的最大值即输出数组中相应位置的元素。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(436),alt:"img"}})]),s._v(" "),n("p",[s._v("上图展示了池化窗口形状为"),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mn",[s._v("2")]),n("mo",[s._v("×")]),n("mn",[s._v("2")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("2\\times 2")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.72777em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[s._v("2")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("×")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[s._v("2")])])])]),s._v("的最大池化，阴影部分为第一个输出元素及其计算所使用的输入元素。输出数组的高和宽分别为2，其中的4个元素由取最大值运算"),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mtext",[s._v("max")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("\\text{max}")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),n("span",{staticClass:"mord text"},[n("span",{staticClass:"mord"},[s._v("max")])])])])]),s._v("得出：")]),s._v(" "),n("p",{staticClass:"katex-block"},[n("span",{staticClass:"katex-display"},[n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"}},[n("semantics",[n("mrow",[n("mi",[s._v("max")]),n("mo",[s._v("⁡")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mn",[s._v("0")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("1")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("3")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("4")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")]),n("mo",[s._v("=")]),n("mn",[s._v("4")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mspace",{attrs:{linebreak:"newline"}}),n("mi",[s._v("max")]),n("mo",[s._v("⁡")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mn",[s._v("1")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("2")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("4")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("5")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")]),n("mo",[s._v("=")]),n("mn",[s._v("5")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mspace",{attrs:{linebreak:"newline"}}),n("mi",[s._v("max")]),n("mo",[s._v("⁡")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mn",[s._v("3")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("4")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("6")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("7")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")]),n("mo",[s._v("=")]),n("mn",[s._v("7")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mspace",{attrs:{linebreak:"newline"}}),n("mi",[s._v("max")]),n("mo",[s._v("⁡")]),n("mo",{attrs:{stretchy:"false"}},[s._v("(")]),n("mn",[s._v("4")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("5")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("7")]),n("mo",{attrs:{separator:"true"}},[s._v(",")]),n("mn",[s._v("8")]),n("mo",{attrs:{stretchy:"false"}},[s._v(")")]),n("mo",[s._v("=")]),n("mn",[s._v("8.")]),n("mspace",{attrs:{linebreak:"newline"}})],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("\\max(0,1,3,4)=4,\\\\\n\\max(1,2,4,5)=5,\\\\\n\\max(3,4,6,7)=7,\\\\\n\\max(4,5,7,8)=8.\\\\\n")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mop"},[s._v("max")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord"},[s._v("0")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("1")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("3")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("4")]),n("span",{staticClass:"mclose"},[s._v(")")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[s._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.8388800000000001em","vertical-align":"-0.19444em"}}),n("span",{staticClass:"mord"},[s._v("4")]),n("span",{staticClass:"mpunct"},[s._v(",")])]),n("span",{staticClass:"mspace newline"}),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mop"},[s._v("max")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord"},[s._v("1")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("2")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("4")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("5")]),n("span",{staticClass:"mclose"},[s._v(")")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[s._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.8388800000000001em","vertical-align":"-0.19444em"}}),n("span",{staticClass:"mord"},[s._v("5")]),n("span",{staticClass:"mpunct"},[s._v(",")])]),n("span",{staticClass:"mspace newline"}),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mop"},[s._v("max")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord"},[s._v("3")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("4")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("6")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("7")]),n("span",{staticClass:"mclose"},[s._v(")")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[s._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.8388800000000001em","vertical-align":"-0.19444em"}}),n("span",{staticClass:"mord"},[s._v("7")]),n("span",{staticClass:"mpunct"},[s._v(",")])]),n("span",{staticClass:"mspace newline"}),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),n("span",{staticClass:"mop"},[s._v("max")]),n("span",{staticClass:"mopen"},[s._v("(")]),n("span",{staticClass:"mord"},[s._v("4")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("5")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("7")]),n("span",{staticClass:"mpunct"},[s._v(",")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.16666666666666666em"}}),n("span",{staticClass:"mord"},[s._v("8")]),n("span",{staticClass:"mclose"},[s._v(")")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),n("span",{staticClass:"mrel"},[s._v("=")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[s._v("8.")])]),n("span",{staticClass:"mspace newline"})])])])]),s._v(" "),n("p",[s._v("二维平均池化的工作原理与二维最大池化类似，但将最大运算符替换成平均运算符。池化窗口形状为"),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[s._v("p")]),n("mo",[s._v("×")]),n("mi",[s._v("q")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("p \\times q")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.7777700000000001em","vertical-align":"-0.19444em"}}),n("span",{staticClass:"mord mathnormal"},[s._v("p")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("×")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.625em","vertical-align":"-0.19444em"}}),n("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("q")])])])]),s._v("的池化层称为"),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[s._v("p")]),n("mo",[s._v("×")]),n("mi",[s._v("q")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("p \\times q")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.7777700000000001em","vertical-align":"-0.19444em"}}),n("span",{staticClass:"mord mathnormal"},[s._v("p")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("×")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.625em","vertical-align":"-0.19444em"}}),n("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("q")])])])]),s._v("池化层，其中的池化运算叫作"),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mi",[s._v("p")]),n("mo",[s._v("×")]),n("mi",[s._v("q")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("p \\times q")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.7777700000000001em","vertical-align":"-0.19444em"}}),n("span",{staticClass:"mord mathnormal"},[s._v("p")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("×")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.625em","vertical-align":"-0.19444em"}}),n("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[s._v("q")])])])]),s._v("池化。")]),s._v(" "),n("p",[s._v("让我们再次回到本节开始提到的物体边缘检测的例子。现在我们将卷积层的输出作为"),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mn",[s._v("2")]),n("mo",[s._v("×")]),n("mn",[s._v("2")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("2\\times 2")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.72777em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[s._v("2")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("×")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[s._v("2")])])])]),s._v("最大池化的输入。设该卷积层输入是"),n("code",[s._v("X")]),s._v("、池化层输出为"),n("code",[s._v("Y")]),s._v("。无论是"),n("code",[s._v("X[i, j]")]),s._v("和"),n("code",[s._v("X[i, j+1]")]),s._v("值不同，还是"),n("code",[s._v("X[i, j+1]")]),s._v("和"),n("code",[s._v("X[i, j+2]")]),s._v("不同，池化层输出均有"),n("code",[s._v("Y[i, j]=1")]),s._v("。也就是说，使用"),n("span",{staticClass:"katex"},[n("span",{staticClass:"katex-mathml"},[n("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[n("semantics",[n("mrow",[n("mn",[s._v("2")]),n("mo",[s._v("×")]),n("mn",[s._v("2")])],1),n("annotation",{attrs:{encoding:"application/x-tex"}},[s._v("2\\times 2")])],1)],1)],1),n("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.72777em","vertical-align":"-0.08333em"}}),n("span",{staticClass:"mord"},[s._v("2")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),n("span",{staticClass:"mbin"},[s._v("×")]),n("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),n("span",{staticClass:"base"},[n("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),n("span",{staticClass:"mord"},[s._v("2")])])])]),s._v("最大池化层时，只要卷积层识别的模式在高和宽上移动不超过一个元素，我们依然可以将它检测出来。")]),s._v(" "),n("p",[s._v("下面把池化层的前向计算实现在"),n("code",[s._v("pool2d")]),s._v("函数里。它跟"),n("a",{attrs:{href:"conv-layer.ipynb"}},[s._v("“二维卷积层”")]),s._v("一节里"),n("code",[s._v("corr2d")]),s._v("函数非常类似，唯一的区别在计算输出"),n("code",[s._v("Y")]),s._v("上。")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pool2d")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pool_size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" mode"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'max'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    p_h"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" p_w "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pool_size\n    Y "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("zeros"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("shape"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" p_h "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("shape"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" p_w "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    Y "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Variable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("shape"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" j "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("shape"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'max'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                Y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("assign"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reduce_max"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("p_h"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("j"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("p_w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'avg'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                Y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("assign"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reduce_mean"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("p_h"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("j"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("p_w"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" Y\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("我们可以构造图5.6中的输入数组"),n("code",[s._v("X")]),s._v("来验证二维最大池化层的输出。")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[s._v("X "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("constant"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("dtype"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("float32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\npool2d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("输出：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("<tf.Variable 'Variable:0' shape=(2, 2) dtype=float32, numpy=\narray([[4., 5.],\n       [7., 8.]], dtype=float32)>\n")])])]),n("p",[s._v("同时我们实验一下平均池化层。")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[s._v("pool2d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'avg'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("输出：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("<tf.Variable 'Variable:0' shape=(2, 2) dtype=float32, numpy=\narray([[2., 3.],\n       [5., 6.]], dtype=float32)>\n")])])]),n("h2",{attrs:{id:"填充和步幅"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#填充和步幅"}},[s._v("#")]),s._v(" 填充和步幅")]),s._v(" "),n("p",[s._v("同卷积层一样，池化层也可以在输入的高和宽两侧的填充并调整窗口的移动步幅来改变输出形状。池化层填充和步幅与卷积层填充和步幅的工作机制一样。我们将通过"),n("code",[s._v("nn")]),s._v("模块里的二维最大池化层MaxPool2D来演示池化层填充和步幅的工作机制。我们先构造一个形状为(1, 1, 4, 4)的输入数据，前两个维度分别是批量和通道。")]),s._v(" "),n("p",[s._v("注：tensorflow默认数据类型为'channels_last'，所以这里使用(1,4,4,1)而不是(1,1,4,4)")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#tensorflow default data_format == 'channels_last'")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#so (1,4,4,1) instead of (1,1,4,4)")]),s._v("\nX "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("reshape"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("constant"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nX\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("输出：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("<tf.Tensor: id=112, shape=(1, 4, 4, 1), dtype=int32, numpy=\narray([[[[ 0],\n         [ 1],\n         [ 2],\n         [ 3]],\n\n        [[ 4],\n         [ 5],\n         [ 6],\n         [ 7]],\n\n        [[ 8],\n         [ 9],\n         [10],\n         [11]],\n\n        [[12],\n         [13],\n         [14],\n         [15]]]])>\n")])])]),n("p",[s._v("默认情况下，"),n("code",[s._v("MaxPool2D")]),s._v("实例里步幅和池化窗口形状相同。下面使用形状为(3, 3)的池化窗口，默认获得形状为(3, 3)的步幅。")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[s._v("pool2d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keras"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("layers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("MaxPool2D"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pool_size"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\npool2d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("输出：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("<tf.Tensor: id=113, shape=(1, 1, 1, 1), dtype=int32, numpy=array([[[[10]]]])>\n")])])]),n("p",[s._v("tensorflow 中 padding 有 same 和 valid 两种， same 会在窗口大小不满足时填充0，valid 会舍弃即不填充")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[s._v("pool2d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keras"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("layers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("MaxPool2D"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pool_size"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("padding"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'same'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("strides"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\npool2d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("输出：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("<tf.Tensor: id=114, shape=(1, 2, 2, 1), dtype=int32, numpy=\narray([[[[10],\n         [11]],\n\n        [[14],\n         [15]]]])>\n")])])]),n("h2",{attrs:{id:"多通道"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多通道"}},[s._v("#")]),s._v(" 多通道")]),s._v(" "),n("p",[s._v("在处理多通道输入数据时，池化层对每个输入通道分别池化，而不是像卷积层那样将各通道的输入按通道相加。这意味着池化层的输出通道数与输入通道数相等。下面将数组"),n("code",[s._v("X")]),s._v("和"),n("code",[s._v("X+1")]),s._v("在通道维上连结来构造通道数为2的输入。")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[s._v("X "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("concat"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" X"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" axis"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nX"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("shape\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("输出：")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("TensorShape([1, 4, 4, 2])\n")])])]),n("p",[s._v("池化后，我们发现输出通道数仍然是2。")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[s._v("pool2d "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keras"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("layers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("MaxPool2D"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" padding"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'same'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" strides"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\npool2d"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("X"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("输出：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<tf.Tensor: shape=(1, 2, 2, 2), dtype=int32, numpy=\narray([[[[10, 11],\n         [11, 12]],\n\n        [[14, 15],\n         [15, 16]]]])>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),n("ul",[n("li",[s._v("最大池化和平均池化分别取池化窗口中输入元素的最大值和平均值作为输出。")]),s._v(" "),n("li",[s._v("池化层的一个主要作用是缓解卷积层对位置的过度敏感性。")]),s._v(" "),n("li",[s._v("可以指定池化层的填充和步幅。")]),s._v(" "),n("li",[s._v("池化层的输出通道数跟输入通道数相同。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);